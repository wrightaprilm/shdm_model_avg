bees <- read_csv("Downloads/bee_fxndata.csv")
library(tidyverse)
bees <- read_csv("Downloads/bee_fxndata.csv")
bees <- read_excel("Downloads/Metadata_Spartina_FungalMicrobiome.xlsx")
bees <- read_xcel("Downloads/Metadata_Spartina_FungalMicrobiome.xlsx")
library(readxl)
bees <- read_excel("Downloads/Metadata_Spartina_FungalMicrobiome.xlsx")
microbiome <- read_excel("Downloads/Metadata_Spartina_FungalMicrobiome.xlsx")
microbiome
install.packages("devtools")
install.packages("usethis")
library(devtools)
library(tidyverse)
library(readxl)
devtools::install_github("joshoriv/rivera.package")
library(rnaturalearth)
library(rnaturalearthdata)
library(mapdata)
devtools::install_github("clairecrookston18/crookston.package1")
library(assertthat)
measurements <- read_csv("inst/extdata/ORIGDATAcorrect.csv")
library(tidyverse)
measurements <- read_csv("../inst/extdata/ORIGDATAcorrect.csv")
devtools::install_github("victoria-mahoney/mahoney.package")
library("mahoney.package")
library(readr)
hyalella <- read_csv("../inst/extdata/Hyalella_data.csv")
summary(hyalella)
library(readr)
hyalella <- read_csv("inst/extdata/Hyalella_data.csv")
summary(hyalella)
install_github("lfabreti/convenience")
library(convenience)
devtools::install_github("lfabreti/convenience")
devtools::install_github("W0650629/RevR")
?RevR
RevR
library(RevR)
?RevR::CallRev()
RevR::doRev()
RevR::doRev
CallRev("vec <- c(0,1,1,1")
library(RevR)
InitRev("~/software/rb")
RepRev
RepRev()
InitRev("/Users/april/software/rb")
RepRev()
RepRev()
RepRev()
pwd()
pwd
getwd()
RepRev()
RepRev()
RepRev()
RevEnv$RevPath
system2(RevEnv$RevPath)
2+2
posteriorPredictiveProbability(v(2), 3)
RepRev()
RepRev()
RepRev()
RepRev()
RepRev()
RepRev()
RepRev()
q()
library(RevR)
InitRev("~/software/rb")
InitRev("/Users/april/software/rb")
system2("rb path", "path to file with 2+2", stdout = "path to empty file")
system2("rbpath", "path to file with 2+2", stdout = "path to empty file")
system2("/Users/april/software/rb", "path to file with 2+2", stdout = "path to empty file")
system2("/Users/april/software/rb", "path to file with 2+2", stdout = "test")
system2("/Users/april/software/rb", "path to file with 2+2", stdout = "test")
system2("/Users/april/software/rb", "input", stdout = "test")
system2("/Users/april/software/rb", "/Users/april/input", stdout = "test")
system2("/Users/april/software/rb", "/Users/april/input.txt", stdout = "test")
system2("/Users/april/software/rb", "/Users/april/input.txt", stdout = "test")
system2("/Users/april/software/rb", "/Users/april/input", stdout = "test")
system2("/Users/april/software/rb", "/Users/april/input", stdout = "test")
library(RevR)
macFun <- function(argu, path){
​
ret <- unlist(argu)
​
tf <- tempfile(pattern = "file", tmpdir = paste(getwd(), "/", sep = ""), fileext = ".rev")
tf <- gsub(pattern = "\\\\", "//", tf)
​
fopen <- file(tf)
​
writeLines(ret, fopen, sep = "\n")
​
if(.Platform$OS.type == "windows"){
out <- system2(path, args = c(tf), stdout = T)
}else{
tf2 <- tempfile(pattern = "file", tmpdir = paste(getwd(), "/", sep = ""), fileext = ".rev")
tf2 <- gsub(pattern = "\\\\", "//", tf)
​
fopen2 <- file(tf2)
​
system2(path, args = c(tf), stdout = tf2)
​
out <- readLines(fopen2)
close(fopen2)
}
​
out <- out[-c(1:13, length(out)-1, length(out))]
​
close(fopen)
return(out)
}
InitRev("/Users/april/software/rb-mpi")
RepRev
RepRev()
c
RepRev()
RepRev()
devtools::install_github("W0650629/RevR")
InitRev("/Users/april/software/rb-mpi")
library(RevR)
InitRev("/Users/april/software/rb-mpi")
RepRev()
2+4
devtools::install_github("nstrayer/datadrivencv")
devtools::install_github("nstrayer/datadrivencv")
datadrivencv::use_datadriven_cv(full_name = "April Wright")
install.packages("icon")
install.packages("icon")
devtools::install_github("nstrayer/datadrivencv")
Cstack_info()["size"]
Cstack_info()["size"]
Cstack_info()
library(Revticulate)
library(RevKnitr)
remove.packages("Revticulate")
remove.packages("RevKnitr")
devtools::install_packages("revbayes/Revticulate")
devtools::install_github("revbayes/Revticulate")
?Revticulate
devtools::install_github("ThomasDodson/R_package_Dodson")
librayr(MorphoMussel)
library(MorphoMussel)
devtools::install_github("ThomasDodson/R_package_Dodson")
library(MorphoMussel)
?MorphoMussel
??MorphoMussel
devtools::install_github("ThomasDodson/R_package_Dodson")
library(MorphoMussel)
MorphoMussel
?MorphoMussel
??MorphoMussel
species <- c("Addax nasomaculatus","Aepyceros melampus","Alcelaphus buselaphus","Alcelaphus lichtensteinii","Alces alces","Alces machlis","Ammodorcas clarkei","Ammotragus europaeus","Antidorcas marsupialis","Antilocapra americana","Antilope cervicapr","Axis axis","Axis calamianensis","Axis kuhlii","Axis porcinus","Babyrousa babyrussa","Beatragus hunteri","Bison bison","Bison bonasus","Blastocerus dichotomus","Bos grunniens","Bos javanicus","Bos sauveli","Bos taurus","Boselaphus tragocamelus","Bubalus bubalis","Bubalus depressicornis","Bubalus mindorensis","Bubalus murrensis","Bubalus quarlesi","Budorcas taxicolor")
for (x in species){
term<-paste(x,"[Organism] AND ((COX1[Gene]) AND complete cds[All Fields])",sep='',collapse = NULL)
search<-entrez_search(db="nuccore",term=term,retmax=1)
data[x] <- tryCatch({entrez_fetch(db="nuccore",id=search$ids,rettype="fasta")},
error = function(e){NA})
}
library(rentrez)
species <- c("Addax nasomaculatus","Aepyceros melampus","Alcelaphus buselaphus","Alcelaphus lichtensteinii","Alces alces","Alces machlis","Ammodorcas clarkei","Ammotragus europaeus","Antidorcas marsupialis","Antilocapra americana","Antilope cervicapr","Axis axis","Axis calamianensis","Axis kuhlii","Axis porcinus","Babyrousa babyrussa","Beatragus hunteri","Bison bison","Bison bonasus","Blastocerus dichotomus","Bos grunniens","Bos javanicus","Bos sauveli","Bos taurus","Boselaphus tragocamelus","Bubalus bubalis","Bubalus depressicornis","Bubalus mindorensis","Bubalus murrensis","Bubalus quarlesi","Budorcas taxicolor")
for (x in species){
term<-paste(x,"[Organism] AND ((COX1[Gene]) AND complete cds[All Fields])",sep='',collapse = NULL)
search<-entrez_search(db="nuccore",term=term,retmax=1)
data[x] <- tryCatch({entrez_fetch(db="nuccore",id=search$ids,rettype="fasta")},
error = function(e){NA})
}
search$ids
for (x in species){
term<-paste(x,"[Organism] AND ((cox1[Gene]) AND complete cds[All Fields])",sep='',collapse = NULL)
search<-entrez_search(db="nuccore",term=term,retmax=1)
data[x] <- tryCatch({entrez_fetch(db="nuccore",id=search$ids,rettype="fasta")},
error = function(e){NA})
}
for (x in species){
term<-paste(x,"[Organism] AND ((CYTB[Gene]) AND complete cds[All Fields])",sep='',collapse = NULL)
search<-entrez_search(db="nuccore",term=term,retmax=1)
data[x] <- tryCatch({entrez_fetch(db="nuccore",id=search$ids,rettype="fasta")},
error = function(e){NA})
}
library(ggtree)
library(ape)
tree <- rtree(5)
tree
tree$tip.label = c("A", "B", "C", "D", "E")
tree
plot(tree)
vals <- rexp(1000, 10)
hist(vals)
vals <- rexp(1000, 1)
hist(vals)
vals <- rexp(1000, 1)
hist(vals)
vals <- rlnorm(1000, 1)
hist(vals)
vals <- rlnorm(1000, .5)
hist(vals)
vals <- rlnorm(1000, 5)
hist(vals)
vals <- rlnorm(1000, .25)
hist(vals)
ln(-6568.519) - ln(-89486.81)
log(-6568.519) - log(-89486.81)
log(6568.519) - log(89486.81)
exp(-2.61)
log(89486.81) - log(6568.519) -
0
exp(2.61)
?log
library(geiger)
library(animate)
nsim <- 100
X <- matrix(rnorm(n = nsim * (length(t) - 1), sd = sqrt(sig2)), nsim, length(t) -
1)
nsim <- 100
X <- matrix(rnorm(n = nsim * (length(t) - 1), sd = sqrt(sig2)), nsim, length(t) -
1)
time <- 100
sig2 <- 0.01
nsim <- 100
X <- matrix(rnorm(n = nsim * (length(t) - 1), sd = sqrt(sig2)), nsim, length(t) -
1)
X <- cbind(rep(0, nsim), t(apply(X, 1, cumsum)))
plot(t, X[1, ], xlab = "time", ylab = "phenotype", ylim = c(-2, 2), type = "l")
apply(X[2:nsim, ], 1, function(x, t) lines(t, x), t = t)
X
X <- matrix(rnorm(n = nsim * (length(t) - 1), sd = sqrt(sig2)), nsim, length(t) -
1)
X
X <- matrix(0, nsim, length(t))
for (i in 1:nsim) X[i, ] <- c(0, cumsum(rnorm(n = length(t) - 1, sd = sqrt(sig2))))
plot(t, X[1, ], xlab = "time", ylab = "phenotype", ylim = c(-2, 2), type = "l")
for (i in 1:nsim) lines(t, X[i, ])
nsim<-100
X<-matrix(rnorm(n=nsim*(length(t)-1),sd=sqrt(sig2)),nsim,length(t)-1)
X<-cbind(rep(0,nsim),t(apply(X,1,cumsum)))
plot(t,X[1,],xlab="time",ylab="phenotype",ylim=c(-2,2),type="l")
apply(X[2:nsim,],1,function(x,t) lines(t,x),t=t)
X<-matrix(rnorm(n=nsim*(length(t)-1),sd=sqrt(sig2)),nsim,length(t)-1)
X
rnorm(n=nsim*(length(t)-1),sd=sqrt(sig2)),nsim,length(t)-1)
rnorm(n=nsim*(length(t)-1),sd=sqrt(sig2))
t <- 100
sig2 <- 0.01
nsim <- 100
nsim<-100
X<-matrix(rnorm(n=nsim*(length(t)-1),sd=sqrt(sig2)),nsim,length(t)-1)
X<-cbind(rep(0,nsim),t(apply(X,1,cumsum)))
plot(t,X[1,],xlab="time",ylab="phenotype",ylim=c(-2,2),type="l")
apply(X[2:nsim,],1,function(x,t) lines(t,x),t=t)
rnorm(n=nsim*(length(t)-1),sd=sqrt(sig2))
nsim
t
sig2
sqrt(sig2)
X<-matrix(rnorm(n=nsim*(length(t)-1),sd=sqrt(sig2),nsim),length(t)-1)
X
rnorm(n=nsim*(length(t)-1),sd=sqrt(sig2),nsim)
rnorm(n=nsim*(length(t)-1),sd=sqrt(sig2))
rnorm?
)
?rnorm
rnorm(n=nsim*(length(t)-1),sd=sqrt(sig2),nsim,0)
rnorm(n=nsim*(length(t)-1),sd=sqrt(sig2),nsim,mean = 0)
rnorm(n=nsim*(length(t)-1),sd=sqrt(sig2),mean = 0)
rnorm(n=1000,sd=sqrt(sig2),mean = 0)
matrix(rnorm(n=1000,sd=sqrt(sig2),mean = 0),length(t)-1)
matrix(rnorm(n=1000,sd=sqrt(sig2),mean = 0),length(t)-1)
matrix(rnorm(n=1000,sd=sqrt(sig2),mean = 0),1000)
X<-matrix(rnorm(n=1000,sd=sqrt(sig2),mean = 0),1000)
X
X<-cbind(rep(0,nsim),t(apply(X,1,cumsum)))
X<-cbind(rep(0,1000),t(apply(X,1,cumsum)))
X<-cbind(rep(0,1000),1000(apply(X,1,cumsum)))
t <- rtree(15)
library(ape)
t <- rtree(15)
x<-fastBM(t,sig2=sig2,internal=TRUE)
library(phytools)
x<-fastBM(t,sig2=sig2,internal=TRUE)
x
phenogram(t,x,spread.labels=TRUE,spread.cost=c(1,0))
X<-matrix(rnorm(n=nsim*(length(t)-1),sd=sqrt(sig2/10)),nsim,length(t)-1)
X<-cbind(rep(0,nsim),t(apply(X,1,cumsum)))
plot(t,X[1,],xlab="time",ylab="phenotype",ylim=c(-2,2),type="l")
t <- 100
X<-matrix(rnorm(n=nsim*(length(t)-1),sd=sqrt(sig2/10)),nsim,length(t)-1)
X<-cbind(rep(0,nsim),t(apply(X,1,cumsum)))
plot(t,X[1,],xlab="time",ylab="phenotype",ylim=c(-2,2),type="l")
apply(X[2:nsim,],1,function(x,t) lines(t,x),t=t)
nsim=10
X<-matrix(rnorm(n=nsim*(length(t)-1),sd=sqrt(sig2/10)),nsim,length(t)-1)
X<-cbind(rep(0,nsim),t(apply(X,1,cumsum)))
plot(t,X[1,],xlab="time",ylab="phenotype",ylim=c(-2,2),type="l")
apply(X[2:nsim,],1,function(x,t) lines(t,x),t=t)
t<-0:100 # time
sig2<-0.01
X<-matrix(rnorm(n=nsim*(length(t)-1),sd=sqrt(sig2/10)),nsim,length(t)-1)
X<-cbind(rep(0,nsim),t(apply(X,1,cumsum)))
plot(t,X[1,],xlab="time",ylab="phenotype",ylim=c(-2,2),type="l")
apply(X[2:nsim,],1,function(x,t) lines(t,x),t=t)
sig2 = .5
X<-matrix(rnorm(n=nsim*(length(t)-1),sd=sqrt(sig2/10)),nsim,length(t)-1)
X<-cbind(rep(0,nsim),t(apply(X,1,cumsum)))
plot(t,X[1,],xlab="time",ylab="phenotype",ylim=c(-2,2),type="l")
apply(X[2:nsim,],1,function(x,t) lines(t,x),t=t)
?OU
?simOU
time_steps = 100
X.b = replicate(10, cumsum(c(0, rnorm(time_steps - 1))))
alpha = 0.1    # restraining force on trait evolution
sim.ou = function() {
x.ou = numeric(time_steps)
for (i in 2:time_steps)
x.ou[i] = x.ou[i - 1] + rnorm(1) - (alpha * x.ou[i - 1])
x.ou   # returns the value of x
}
X.ou = replicate(10, sim.ou())
layout(matrix(1:2, 2, 1))
yl = range(X.b)
y2 = range(X.b)
matplot(X.b, ylim = yl, type = "l", col = 1, main = "Brownian")
matplot(X.ou, ylim = y2, type = "l", col = 1, main = "OU")
samples <- rgamma(1000, .05)
hist(samples)
hist(samples, nclass = 4)
hist(samples, nclass = 8)
setwd("/Users/april/projects/SHDM_model_avg")
data <- read.csv("master_table.csv")
data
data %>%
()
apply(data,1,which.min))
apply(data,1,which.min)
data[apply(data,1,which.min)]
data[apply(data,1,which.min), ]
data[ , apply(data,1,which.min)]
data[1 , apply(data,1,which.min)]
data[2 , apply(data,1,which.min)]
data[2 ,1]
data[2 , apply(data,1,which.min))]
data[, apply(data,1,which.min))]
apply(data,1,which.min))
apply(data,1,which.min)
data[1, ]
data[apply(data,1,which.min), ]
data[apply(data,1,which.min), 1]
data[, 1]
data[apply(data,1,which.min), 1]
data[apply(data,1,which.min), ]
list_of_columns <- apply(data,1,which.min)
data[1, list_of_columns]
list_of_columns
list_of_columns == 6
data
head(data)
replace(list_of_columns, list_of_columns==2, "infinity")
l_of_c <- replace(list_of_columns, list_of_columns==2, "infinity")
l_of_c <- replace(l_o_c, l_o_c==3, "alpha = 1")
l_of_c <- replace(l_of_c, l_of_c==3, "alpha = 1")
l_of_c <- replace(l_of_c, l_of_c==4, "alpha = 0.2")
l_of_c
l_of_c <- replace(l_of_c, l_of_c==5, "alpha = 2")
l_of_c <- replace(l_of_c, l_of_c==6, "alpha = 10")
l_of_c
head(date)
head(dat1)
head(data)
l_of_c <- replace(list_of_columns, list_of_columns==2, "infinity")
l_of_c <- replace(l_of_c, l_of_c==3, "alpha = 1")
l_of_c <- replace(l_of_c, l_of_c==4, "alpha = .2")
l_of_c <- replace(l_of_c, l_of_c==5, "alpha = 2")
l_of_c <- replace(l_of_c, l_of_c==6, "alpha = .05")
l_of_c <- replace(l_of_c, l_of_c==7, "alpha = 10")
l_of_c
data$X10
data[1,7]
apply(data,1,which.min)
warnings()
apply(data,,which.min)
apply(data,2:7,which.min)
apply(data, 1, FUN = min, na.rm = TRUE)
apply(data, 1,  min, na.rm = TRUE)
apply(data, 1,  min)
data %>% rowwise() %>% mutate(minIget = min(x, y))
data %>%
rowwise() %>%
mutate(minIget = min(x, y))
%>%
library(tidyverse)
data %>%
rowwise() %>%
mutate(minIget = min(x, y))
names(data)
data %>%
rowwise() %>%
mutate(minIget = min("Infinity","X1", "X0.2",X2","X0.05", "X10","X"))
data %>%
rowwise() %>%
mutate(minIget = min(Infinity,X1, X0.2,X2,X0.05, X10,X))
data %>%
rowwise() %>%
mutate(min = min(Infinity,X1, X0.2,X2,X0.05, X10,X))
data %>%
rowwise() %>%
mutate(min = min(Infinity,X1, X0.2,X2,X0.05, X10))
data_min <- data %>%
rowwise() %>%
mutate(min = min(Infinity,X1, X0.2,X2,X0.05, X10))
data_min %>%
rowwise() %>%
mutate(MIN_COL = names(.)[2:7][which.min(c_across(c(Infinity,X1, X0.2,X2,X0.05, X10)))] %>%
ungroup()
)
data_min %>%
rowwise() %>%
mutate(MIN_COL = names(.)[2:7][which.min(c_across(c(Infinity,X1, X0.2,X2,X0.05, X10)))]) %>%
ungroup()
data_min <- data %>%
rowwise() %>%
mutate(min = max(Infinity,X1, X0.2,X2,X0.05, X10))
data_min %>%
rowwise() %>%
mutate(MIN_COL = names(.)[2:7][which.max(c_across(c(Infinity,X1, X0.2,X2,X0.05, X10)))]) %>%
ungroup()
data_min <- data_min %>%
rowwise() %>%
mutate(MIN_COL = names(.)[2:7][which.max(c_across(c(Infinity,X1, X0.2,X2,X0.05, X10)))]) %>%
ungroup()
data_min %>%
select(MIN_COL) %>%
summary()
data_min %>%
select(MIN_COL) %>%
summarize()
select(MIN_COL) %>%
group_by()
data_min %>%
group_by(MIN_COL)
data_min %>%
group_by(MIN_COL) %>%
count()
write(data_min, file = "summarized.csv")
data_min
write.csv(data_min, "summarized.csv")
data %>%
summarise(across(.fns = ~which.max(. == sort(unique(.))[2])))
data_min <- data_min %>%
rowwise() %>%
max(c_across(c(Infinity,X1, X0.2,X2,X0.05, X10)))
data_min <- data_min %>%
rowwise() %>%
max(c(Infinity,X1, X0.2,X2,X0.05, X10))
data_min <- data_min %>%
rowwise() %>%
max(Infinity,X1, X0.2,X2,X0.05, X10)
data_min %>%
rowwise() %>%
max("Infinity","X1", "X0.2","X2","X0.05", "X10")
data_min
data_min %>%
rowwise() %>%
max(2:7)
data_min %>%
rowwise() %>%
max()
data_min %>%
rowwise() %>%
max()[2:7]
data_min %>%
select("Infinity","X1", "X0.2","X2","X0.05", "X10")
rowwise() %>%
max()
data_min %>%
select("Infinity","X1", "X0.2","X2","X0.05", "X10")
data_min %>%
select("Infinity","X1", "X0.2","X2","X0.05", "X10")
rowwise()
data_min %>%
select("Infinity","X1", "X0.2","X2","X0.05", "X10")
max()
data_min %>%
select("Infinity","X1", "X0.2","X2","X0.05", "X10")
max(na.rm = TRUE)
data_min <- data %>%
rowwise() %>%
mutate(min = max(Infinity,X1, X0.2,X2,X0.05, X10))
()
data %>%
rowwise() %>%
mutate(min = max(Infinity,X1, X0.2,X2,X0.05, X10))
data %>%
rowwise() %>%
max(Infinity,X1, X0.2,X2,X0.05, X10)
data %>%
rowwise() %>%
max("Infinity","X1", "X0.2","X2","X0.05", "X10")
data %>%
rowwise() %>%
max()
data
